
var CarouselProducts = React.createClass({
	loadJson: function(){
		var jsonData = new XMLHttpRequest(),
			that = this;

		jsonData.overrideMimeType("application/json");

		this.serverRequest = jsonData.onreadystatechange = function() {
			if (jsonData.readyState == 4 && jsonData.status == 200) {
				that.setState({ data: JSON.parse(jsonData.responseText) });
			}
		}.bind(this);

		jsonData.open("GET", that.props.url, true);
		jsonData.send();
	},
	getInitialState: function(){
		return { data: undefined };
	},
	componentDidMount: function(){
		this.loadJson();
	},
	componentWillUnmount: function() {
		this.serverRequest.abort();
	},
	render: function(){
		var rendered;

		if ( this.state.data != undefined ) {
			rendered = (
			<div className="products-container">
				<ul className="total-carousel">
					{this.state.data.products.map(function (product) {
						return <Product key={product.name} data={product} />;
					})}
				</ul>
			</div>)
		} else {
			rendered = (<p>Loading</p>)
		}

		return (
			rendered
		);
	}
});

var Product = React.createClass({
	render: function(){
		var obj = this.props.data;
		return (
			<li className="item">
				<img src={'images/sapatos/'+obj.img} alt={obj.name} />
				<p>{obj.name}</p>
				{ obj.for != '' ? <span className="price-for">{'De: R$ '+obj.for}</span> : ''}
				<span className="price">
					{'Por: R$ '}<span>{obj.price}</span>
				</span>
				<span className="times">
					{'ou '}<b>{'at√© '+obj.times+'X '}</b>{'de'}<b>{'R$ '+obj.value_times}</b>
				</span>
				<a className="button-buy">comprar</a>
				<span>{'Economize: R$ '+obj.save_value}</span>
			</li>
		);
	}
})

var myElement = <CarouselProducts url="data/data.json" />

ReactDOM.render(
	myElement,
	document.getElementById('application')
);

// Carousel
var carousel = {
	init: function(el, rail, item, arrows){
		var direction = null,
			steps = 0;

		function prev(){
			document.querySelector(arrows+'.prev').onclick = function(){
				direction = 'left';
				move();
			}
		}
		function next(){
			document.querySelector(arrows+'.next').onclick = function(){
				direction = 'right';
				move();
			}
		}
		function move(){
			if ( direction == 'left' ) {
				steps += 20
				document.querySelector(rail).style.left = '-'+steps+'px';
			} else if ( direction == 'right' ) {
				document.querySelector(rail).style.left = steps+'px';
			}
		}
		prev();
		next();
	}
}

carousel.init(
	'.carousel-banners',
	'.content-banners',
	'.item-banner',
	'.arrows-banner');


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbnZhciBDYXJvdXNlbFByb2R1Y3RzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGxvYWRKc29uOiBmdW5jdGlvbigpe1xyXG5cdFx0dmFyIGpzb25EYXRhID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXHJcblx0XHRcdHRoYXQgPSB0aGlzO1xyXG5cclxuXHRcdGpzb25EYXRhLm92ZXJyaWRlTWltZVR5cGUoXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xyXG5cclxuXHRcdHRoaXMuc2VydmVyUmVxdWVzdCA9IGpzb25EYXRhLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoanNvbkRhdGEucmVhZHlTdGF0ZSA9PSA0ICYmIGpzb25EYXRhLnN0YXR1cyA9PSAyMDApIHtcclxuXHRcdFx0XHR0aGF0LnNldFN0YXRlKHsgZGF0YTogSlNPTi5wYXJzZShqc29uRGF0YS5yZXNwb25zZVRleHQpIH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9LmJpbmQodGhpcyk7XHJcblxyXG5cdFx0anNvbkRhdGEub3BlbihcIkdFVFwiLCB0aGF0LnByb3BzLnVybCwgdHJ1ZSk7XHJcblx0XHRqc29uRGF0YS5zZW5kKCk7XHJcblx0fSxcclxuXHRnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCl7XHJcblx0XHRyZXR1cm4geyBkYXRhOiB1bmRlZmluZWQgfTtcclxuXHR9LFxyXG5cdGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpe1xyXG5cdFx0dGhpcy5sb2FkSnNvbigpO1xyXG5cdH0sXHJcblx0Y29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy5zZXJ2ZXJSZXF1ZXN0LmFib3J0KCk7XHJcblx0fSxcclxuXHRyZW5kZXI6IGZ1bmN0aW9uKCl7XHJcblx0XHR2YXIgcmVuZGVyZWQ7XHJcblxyXG5cdFx0aWYgKCB0aGlzLnN0YXRlLmRhdGEgIT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRyZW5kZXJlZCA9IChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJwcm9kdWN0cy1jb250YWluZXJcIj5cclxuXHRcdFx0XHQ8dWwgY2xhc3NOYW1lPVwidG90YWwtY2Fyb3VzZWxcIj5cclxuXHRcdFx0XHRcdHt0aGlzLnN0YXRlLmRhdGEucHJvZHVjdHMubWFwKGZ1bmN0aW9uIChwcm9kdWN0KSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiA8UHJvZHVjdCBrZXk9e3Byb2R1Y3QubmFtZX0gZGF0YT17cHJvZHVjdH0gLz47XHJcblx0XHRcdFx0XHR9KX1cclxuXHRcdFx0XHQ8L3VsPlxyXG5cdFx0XHQ8L2Rpdj4pXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZW5kZXJlZCA9ICg8cD5Mb2FkaW5nPC9wPilcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHRyZW5kZXJlZFxyXG5cdFx0KTtcclxuXHR9XHJcbn0pO1xyXG5cclxudmFyIFByb2R1Y3QgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0cmVuZGVyOiBmdW5jdGlvbigpe1xyXG5cdFx0dmFyIG9iaiA9IHRoaXMucHJvcHMuZGF0YTtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxsaSBjbGFzc05hbWU9XCJpdGVtXCI+XHJcblx0XHRcdFx0PGltZyBzcmM9eydpbWFnZXMvc2FwYXRvcy8nK29iai5pbWd9IGFsdD17b2JqLm5hbWV9IC8+XHJcblx0XHRcdFx0PHA+e29iai5uYW1lfTwvcD5cclxuXHRcdFx0XHR7IG9iai5mb3IgIT0gJycgPyA8c3BhbiBjbGFzc05hbWU9XCJwcmljZS1mb3JcIj57J0RlOiBSJCAnK29iai5mb3J9PC9zcGFuPiA6ICcnfVxyXG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cInByaWNlXCI+XHJcblx0XHRcdFx0XHR7J1BvcjogUiQgJ308c3Bhbj57b2JqLnByaWNlfTwvc3Bhbj5cclxuXHRcdFx0XHQ8L3NwYW4+XHJcblx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwidGltZXNcIj5cclxuXHRcdFx0XHRcdHsnb3UgJ308Yj57J2F0w6kgJytvYmoudGltZXMrJ1ggJ308L2I+eydkZSd9PGI+eydSJCAnK29iai52YWx1ZV90aW1lc308L2I+XHJcblx0XHRcdFx0PC9zcGFuPlxyXG5cdFx0XHRcdDxhIGNsYXNzTmFtZT1cImJ1dHRvbi1idXlcIj5jb21wcmFyPC9hPlxyXG5cdFx0XHRcdDxzcGFuPnsnRWNvbm9taXplOiBSJCAnK29iai5zYXZlX3ZhbHVlfTwvc3Bhbj5cclxuXHRcdFx0PC9saT5cclxuXHRcdCk7XHJcblx0fVxyXG59KVxyXG5cclxudmFyIG15RWxlbWVudCA9IDxDYXJvdXNlbFByb2R1Y3RzIHVybD1cImRhdGEvZGF0YS5qc29uXCIgLz5cclxuXHJcblJlYWN0RE9NLnJlbmRlcihcclxuXHRteUVsZW1lbnQsXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcGxpY2F0aW9uJylcclxuKTtcclxuXHJcbi8vIENhcm91c2VsXHJcbnZhciBjYXJvdXNlbCA9IHtcclxuXHRpbml0OiBmdW5jdGlvbihlbCwgcmFpbCwgaXRlbSwgYXJyb3dzKXtcclxuXHRcdHZhciBkaXJlY3Rpb24gPSBudWxsLFxyXG5cdFx0XHRzdGVwcyA9IDA7XHJcblxyXG5cdFx0ZnVuY3Rpb24gcHJldigpe1xyXG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGFycm93cysnLnByZXYnKS5vbmNsaWNrID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRkaXJlY3Rpb24gPSAnbGVmdCc7XHJcblx0XHRcdFx0bW92ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRmdW5jdGlvbiBuZXh0KCl7XHJcblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYXJyb3dzKycubmV4dCcpLm9uY2xpY2sgPSBmdW5jdGlvbigpe1xyXG5cdFx0XHRcdGRpcmVjdGlvbiA9ICdyaWdodCc7XHJcblx0XHRcdFx0bW92ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRmdW5jdGlvbiBtb3ZlKCl7XHJcblx0XHRcdGlmICggZGlyZWN0aW9uID09ICdsZWZ0JyApIHtcclxuXHRcdFx0XHRzdGVwcyArPSAyMFxyXG5cdFx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocmFpbCkuc3R5bGUubGVmdCA9ICctJytzdGVwcysncHgnO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCBkaXJlY3Rpb24gPT0gJ3JpZ2h0JyApIHtcclxuXHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHJhaWwpLnN0eWxlLmxlZnQgPSBzdGVwcysncHgnO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRwcmV2KCk7XHJcblx0XHRuZXh0KCk7XHJcblx0fVxyXG59XHJcblxyXG5jYXJvdXNlbC5pbml0KFxyXG5cdCcuY2Fyb3VzZWwtYmFubmVycycsXHJcblx0Jy5jb250ZW50LWJhbm5lcnMnLFxyXG5cdCcuaXRlbS1iYW5uZXInLFxyXG5cdCcuYXJyb3dzLWJhbm5lcicpO1xyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
